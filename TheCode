import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sqlalchemy import create_engine
import pymysql

# Step 1: Connect to the SQL database
# Replace these with your actual database details
db_host = 'localhost'
db_user = 'your_user'
db_password = 'your_password'
db_name = 'energy_db'

# Create connection to SQL database
engine = create_engine(f'mysql+pymysql://{db_user}:{db_password}@{db_host}/{db_name}')

# Step 2: Retrieve historical energy consumption data
query = """
SELECT timestamp, consumption
FROM energy_consumption
ORDER BY timestamp;
"""
df = pd.read_sql(query, engine)

# Step 3: Preprocessing data
# Convert 'timestamp' to datetime and set as index
df['timestamp'] = pd.to_datetime(df['timestamp'])
df.set_index('timestamp', inplace=True)

# Ensure data is sorted by timestamp
df = df.sort_index()

# Check for missing values and handle them (e.g., forward fill)
df['consumption'] = df['consumption'].fillna(method='ffill')

# Step 4: Time series forecasting with ARIMA
# We will use the ARIMA model to forecast future consumption

# Split data into training and testing sets (e.g., 80% for training, 20% for testing)
train_size = int(len(df) * 0.8)
train, test = df[:train_size], df[train_size:]

# Fit ARIMA model (choose (p,d,q) based on model tuning or automatic selection)
model = ARIMA(train['consumption'], order=(5, 1, 0))  # Example (p,d,q) = (5, 1, 0)
model_fit = model.fit()

# Step 5: Make predictions on the test set
forecast = model_fit.forecast(steps=len(test))

# Step 6: Plot actual vs predicted consumption
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['consumption'], label='Actual Consumption')
plt.plot(test.index, forecast, label='Predicted Consumption', color='red')
plt.legend()
plt.title('Energy Consumption Forecast')
plt.xlabel('Date')
plt.ylabel('Energy Consumption')
plt.show()

# Step 7: Forecast future energy consumption (e.g., next 30 days)
future_forecast = model_fit.forecast(steps=30)  # Forecast next 30 days
future_dates = pd.date_range(df.index[-1], periods=31, freq='D')[1:]  # Generate future dates

# Plot future forecast
plt.figure(figsize=(10, 6))
plt.plot(df.index, df['consumption'], label='Historical Consumption')
plt.plot(future_dates, future_forecast, label='Future Forecast', color='orange')
plt.legend()
plt.title('Energy Consumption Forecast (Next 30 Days)')
plt.xlabel('Date')
plt.ylabel('Energy Consumption')
plt.show()

# Step 8: Optionally, store the forecast in the SQL database
forecast_df = pd.DataFrame(future_forecast, index=future_dates, columns=['forecasted_consumption'])
forecast_df.to_sql('energy_forecast', con=engine, if_exists='replace', index=True)
